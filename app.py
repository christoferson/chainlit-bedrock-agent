import os
import boto3
from langchain.prompts import PromptTemplate 
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
from langchain.llms.bedrock import Bedrock
import chainlit as cl
from chainlit.input_widget import Select, Slider
from prompt_template import get_template
from typing import Optional
import uuid
import logging
import traceback

AWS_REGION = os.environ["AWS_REGION"]
AUTH_ADMIN_USR = os.environ["AUTH_ADMIN_USR"]
AUTH_ADMIN_PWD = os.environ["AUTH_ADMIN_PWD"]
AGENT_ID = os.environ["AGENT_ID"]
AGENT_ALIAS_ID = os.environ["AGENT_ALIAS_ID"]

@cl.password_auth_callback
def auth_callback(username: str, password: str) -> Optional[cl.User]:
  # Fetch the user matching username from your database
  # and compare the hashed password with the value stored in the database
  if (username, password) == (AUTH_ADMIN_USR, AUTH_ADMIN_PWD):
    return cl.User(identifier=AUTH_ADMIN_USR, metadata={"role": "admin", "provider": "credentials"})
  else:
    return None
  
#@cl.author_rename
#def rename(orig_author: str):
#    mapping = {
#        "ConversationChain": bedrock_model_id
#    }
#    return mapping.get(orig_author, orig_author)

@cl.on_chat_start
async def main():
    bedrock = boto3.client("bedrock", region_name=AWS_REGION)
    
    response = bedrock.list_foundation_models(
        byOutputModality="TEXT"
    )
    
    model_ids = []
    for item in response["modelSummaries"]:
        model_ids.append(item['modelId'])
    
    settings = await cl.ChatSettings(
        [
            Select(
                id="Model",
                label="Amazon Bedrock - Model",
                values=model_ids,
                initial_index=model_ids.index("anthropic.claude-v2"),
            ),
            Slider(
                id="Temperature",
                label="Temperature",
                initial=0.3,
                min=0,
                max=1,
                step=0.1,
            ),
            Slider(
                id = "TopP",
                label = "Top P",
                initial = 1,
                min = 0,
                max = 1,
                step = 0.1,
            ),
            Slider(
                id = "TopK",
                label = "Top K",
                initial = 250,
                min = 0,
                max = 500,
                step = 5,
            ),
            Slider(
                id="MaxTokenCount",
                label="Max Token Size",
                initial=1024,
                min=256,
                max=4096,
                step=256,
            ),
        ]
    ).send()

    ##

    session_id = str(uuid.uuid4())

    cl.user_session.set("session_id", session_id)


    await setup_agent(settings)

@cl.on_settings_update
async def setup_agent(settings):
   
    bedrock_agent_runtime = boto3.client('bedrock-agent-runtime', region_name=AWS_REGION)

    cl.user_session.set("bedrock_agent_runtime", bedrock_agent_runtime)


@cl.on_message
async def main(message: cl.Message):
    # Get ConversationChain from the user session
    session_id = cl.user_session.get("session_id") 
    bedrock_agent_runtime = cl.user_session.get("bedrock_agent_runtime") 

    AGENT_ID = os.environ["AGENT_ID"]
    AGENT_ALIAS_ID = os.environ["AGENT_ALIAS_ID"]

    print(f"AGENT_ID={AGENT_ID} AGENT_ALIAS_ID={AGENT_ALIAS_ID}")

    msg = cl.Message(content="")

    try:

        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/bedrock-agent-runtime/client/invoke_agent.html
        response = bedrock_agent_runtime.invoke_agent(
            agentId=AGENT_ID, 
            agentAliasId=AGENT_ALIAS_ID, # Use TSTALIASID as the agentAliasId to invoke the draft version of your agent.
            sessionId=session_id,  # you continue an existing session with the agent if the value you set for the idle session timeout hasn't been exceeded.
            inputText=message.content, 
            enableTrace=True, 
            endSession=False  # true to end the session with the agent.
        )

        await msg.stream_token(".")
        
        print(f"Answer: {response}")

        answer = ""
        sources = []
        sources_text = ""
        generated_text = ""
        event_stream = response['completion']
        for event in event_stream:        
            print(f"type={type(event)} event={event}")
            if 'chunk' in event:
                chunk = event['chunk']
                token = chunk['bytes'].decode("utf-8")
                answer += token
                await msg.stream_token(token)
                print(event)
                if 'attribution' in chunk: # If a knowledge base was queried, an attribution object with a list of citations is returned.
                    attribution = chunk['attribution']
                    for citation in attribution['citations']:
                        # generatedResponsePart object contains the text generated by the model based on the information from the text in the retrievedReferences
                        generated_text = citation['generatedResponsePart']['textResponsePart']['text']
                        # retrievedReferences object contains the exact text in the chunk relevant to the query alongside the S3 location of the data source
                        for reference in citation['retrievedReferences']: 
                            reference_text = reference['content']['text']
                            sources_text += reference_text
                            location = reference['location']
                            if location['type'] == 's3':
                                sources.append(location['s3Location']['uri'])
                                await msg.stream_token(location['s3Location']['uri'])
            else:
                await msg.stream_token(".")
        print("*********************************************************")
        print(f"Answer: {answer}")
        print("*********************************************************")
        print(f"Sources: {sources}")
        print("*********************************************************")
        print(f"Sources Text: {sources_text}")
        print("*********************************************************")
        print(f"Generated Text: {generated_text}")
        print("*********************************************************")

    except Exception as e:
        logging.error(traceback.format_exc())

    await msg.send()

    print("End")