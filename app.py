import os
import boto3
import chainlit as cl
from chainlit.input_widget import Slider, TextInput
from typing import Optional
import uuid
import logging
import traceback

AWS_REGION = os.environ["AWS_REGION"]
AUTH_ADMIN_USR = os.environ["AUTH_ADMIN_USR"]
AUTH_ADMIN_PWD = os.environ["AUTH_ADMIN_PWD"]
AGENT_ID = os.environ["AGENT_ID"]
AGENT_ALIAS_ID = os.environ["AGENT_ALIAS_ID"]

@cl.password_auth_callback
def auth_callback(username: str, password: str) -> Optional[cl.User]:
  # Fetch the user matching username from your database
  # and compare the hashed password with the value stored in the database
  if (username, password) == (AUTH_ADMIN_USR, AUTH_ADMIN_PWD):
    return cl.User(identifier=AUTH_ADMIN_USR, metadata={"role": "admin", "provider": "credentials"})
  else:
    return None

#@cl.author_rename
#def rename(orig_author: str):
#    mapping = {
#        "ConversationChain": bedrock_model_id
#    }
#    return mapping.get(orig_author, orig_author)

@cl.on_chat_start
async def main():

    session_id = str(uuid.uuid4())

    settings = await cl.ChatSettings(
        [
            TextInput(id="AgentID", label="Agent ID", initial=AGENT_ID),
            TextInput(id="AgentAliasID", label="Agent Alias ID", initial=AGENT_ALIAS_ID),
            TextInput(id="SessionID", label="Session ID", initial=session_id),
        ]
    ).send()

    ##

    cl.user_session.set("session_id", session_id)

    await setup_agent(settings)

@cl.on_settings_update
async def setup_agent(settings):
   
    bedrock_agent_runtime = boto3.client('bedrock-agent-runtime', region_name=AWS_REGION)

    cl.user_session.set("bedrock_agent_runtime", bedrock_agent_runtime)


@cl.on_message
async def main(message: cl.Message):

    session_id = cl.user_session.get("session_id") 
    bedrock_agent_runtime = cl.user_session.get("bedrock_agent_runtime") 

    #AGENT_ID = os.environ["AGENT_ID"]
    #AGENT_ALIAS_ID = os.environ["AGENT_ALIAS_ID"]

    print(f"AGENT_ID={AGENT_ID} AGENT_ALIAS_ID={AGENT_ALIAS_ID}")

    msg = cl.Message(content="")

    async with cl.Step(name="Agent", type="llm", root=True) as step:
        step.input = msg.content

        try:

            # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/bedrock-agent-runtime/client/invoke_agent.html
            response = bedrock_agent_runtime.invoke_agent(
                agentId=AGENT_ID, 
                agentAliasId=AGENT_ALIAS_ID, # Use TSTALIASID as the agentAliasId to invoke the draft version of your agent.
                sessionId=session_id,  # you continue an existing session with the agent if the value you set for the idle session timeout hasn't been exceeded.
                inputText=message.content, 
                enableTrace=True, 
                endSession=False  # true to end the session with the agent.
            )

            #await msg.send() #await msg.stream_token(".")
            
            print(f"Answer: {response}")

            event_sequence_id = 0
            answer = ""
            sources = []
            sources_text = ""
            generated_text = ""
            event_stream = response['completion']
            for event in event_stream:        
                print(f"type={type(event)} event={event}")
                event_sequence_id += 1
                if 'chunk' in event:
                    chunk = event['chunk']
                    msg_chunk = ""
                    if 'bytes' in chunk:
                        token = chunk['bytes'].decode("utf-8")
                        answer += token
                        msg_chunk += f"\n \n {token} \n"
                        
                    if 'attribution' in chunk: # If a knowledge base was queried, an attribution object with a list of citations is returned.
                        attribution = chunk['attribution']
                        location_uri = ""
                        for citation in attribution['citations']:
                            # generatedResponsePart object contains the text generated by the model based on the information from the text in the retrievedReferences
                            generated_text = citation['generatedResponsePart']['textResponsePart']['text']
                            # retrievedReferences object contains the exact text in the chunk relevant to the query alongside the S3 location of the data source
                            for reference in citation['retrievedReferences']: 
                                reference_text = reference['content']['text']
                                sources_text += reference_text
                                location = reference['location']
                                if location['type'] == 's3':
                                    location_uri = location['s3Location']['uri']
                                    sources.append(location_uri)
                        msg_chunk += f"Attribution: Location={location_uri}"

                    await msg.stream_token(msg_chunk)
                    await msg.send()
                elif 'trace' in event:
                    trace = event['trace']['trace']
                    msg_trace = f"{event_sequence_id}. "
                    if 'orchestrationTrace' in trace:
                        msg_trace += f"ORCHESTRATION | "
                        orchestration_trace = trace['orchestrationTrace']
                        print(f"Orchestration Step: \n")
                        if 'rationale' in orchestration_trace:
                            rationale_text = orchestration_trace['rationale']['text']
                            print(f"  Rationale: {rationale_text} \n")
                            msg_trace += f"Rationale: {rationale_text} \n"
                        if 'invocationInput' in orchestration_trace:
                            invocation_input = orchestration_trace['invocationInput']
                            invocation_type = invocation_input['invocationType']
                            invocation_input_kb_id = ""
                            invocation_input_kb_text = ""
                            if 'knowledgeBaseLookupInput' in invocation_input:
                                invocation_input_kb_id = invocation_input['knowledgeBaseLookupInput']['knowledgeBaseId']
                                invocation_input_kb_text = invocation_input['knowledgeBaseLookupInput']['text']
                            print(f"  InvocationInput: {invocation_type} KB.ID={invocation_input_kb_id} KB.Text={invocation_input_kb_text} \n")
                            msg_trace += f"InvocationInput: {invocation_type} KB.ID={invocation_input_kb_id} KB.Text={invocation_input_kb_text} \n"
                        if 'observation' in orchestration_trace:
                            observation = orchestration_trace['observation']
                            observation_type = observation['type']
                            kb_type = ""
                            kb_location = ""
                            if 'knowledgeBaseLookupOutput' in observation:
                                kb_lookup = observation['knowledgeBaseLookupOutput']
                                for kb in kb_lookup['retrievedReferences']:
                                    kb_type = kb['location']['type']
                                    if 'S3' == kb_type:
                                        kb_location = kb['location']['s3Location']['uri']
                            observation_type = observation['type']
                            print(f"  Observation: {observation_type} KB.Type={kb_type} KB.URI={kb_location} \n")
                            msg_trace += f"Observation: {observation_type} KB.Type={kb_type} KB.URI={kb_location} \n"
                        if 'modelInvocationInput' in orchestration_trace:
                            model_invocation_input = orchestration_trace['modelInvocationInput']['type']
                            print(f"  ModelInvocationInput: {model_invocation_input} \n")
                            msg_trace += f"ModelInvocationInput: {model_invocation_input} \n"

                        async with cl.Step(name="Orchestration Step") as orchestration_step:
                            orchestration_step.input = "Orchestration Step Input"
                            orchestration_step.output = msg_trace

                    elif 'preProcessingTrace' in trace:
                        print(f"PreProcessing Step: \n")
                        msg_trace += f"PRE_PROCESSING | "
                        pre_processing_trace = trace['preProcessingTrace']
                        if 'modelInvocationInput' in pre_processing_trace:
                            model_invocation_input_type = pre_processing_trace['modelInvocationInput']['type']
                            model_invocation_input_text = pre_processing_trace['modelInvocationInput']['text']
                            #print(f"  ModelInvocationInput: Type={model_invocation_input_type} Text={model_invocation_input_text} \n")
                            print(f"  ModelInvocationInput: Type={model_invocation_input_type} \n")
                            msg_trace += f"ModelInvocationInput: Type={model_invocation_input_type} \n"
                        if 'modelInvocationOutput' in pre_processing_trace:
                            model_invocation_output = pre_processing_trace['modelInvocationOutput']
                            model_invocation_output_rationale = model_invocation_output['parsedResponse']['rationale']
                            model_invocation_output_isvalid = model_invocation_output['parsedResponse']['isValid']
                            print(f"  ModelInvocationOutput: Rationale={model_invocation_output_rationale} IsValid={model_invocation_output_isvalid} \n")
                            msg_trace += f"ModelInvocationOutput: Rationale={model_invocation_output_rationale} IsValid={model_invocation_output_isvalid} \n"
                        
                        #await step.stream_token(msg_trace)
                        async with cl.Step(name="Pre Processing Step", show_input=False) as pre_processing_step:
                            pre_processing_step.input = "Pre Processing Step Input"
                            pre_processing_step.output = msg_trace

                    elif 'postProcessingTrace' in trace:
                        msg_trace += f"POST_PROCESSIG |  \n"

                        async with cl.Step(name="Post Processing Step") as post_processing_step:
                            post_processing_step.input = "Post Processing Step Input"
                            post_processing_step.output = msg_trace

                    elif 'failureTrace' in trace:
                        msg_trace += f"FAILURE |  \n"

                        failure_reason = trace["failureTrace"]["failureReason"]

                        msg_trace += f"{failure_reason}"

                        async with cl.Step(name="Failure Step") as failure_step:
                            failure_step.input = "Failure Step Input"
                            failure_step.output = msg_trace

                    else:
                        msg_trace += f"UNKNOWN | \n"

                        async with cl.Step(name="Unknown Step") as unknown_step:
                            unknown_step.input = "Unkwnown Step Input"
                            unknown_step.output = msg_trace

                    #await msg.stream_token(msg_trace)    
                    #await msg.send()
                else:
                    await msg.stream_token(".")
                    await msg.send()
            print("*********************************************************")
            print(f"Answer: {answer}")
            print("*********************************************************")
            print(f"Sources: {sources}")
            print("*********************************************************")
            print(f"Sources Text: {sources_text}")
            print("*********************************************************")
            print(f"Generated Text: {generated_text}")
            print("*********************************************************")

        except Exception as e:
            logging.error(traceback.format_exc())

    print("End")

@cl.on_chat_end
def on_chat_end():
    print("The user disconnected!")

    session_id = cl.user_session.get("session_id") 
    bedrock_agent_runtime = cl.user_session.get("bedrock_agent_runtime") 

    AGENT_ID = os.environ["AGENT_ID"]
    AGENT_ALIAS_ID = os.environ["AGENT_ALIAS_ID"]

    print(f"AGENT_ID={AGENT_ID} AGENT_ALIAS_ID={AGENT_ALIAS_ID}")

    try:

        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/bedrock-agent-runtime/client/invoke_agent.html
        response = bedrock_agent_runtime.invoke_agent(
            agentId=AGENT_ID, 
            agentAliasId=AGENT_ALIAS_ID, # Use TSTALIASID as the agentAliasId to invoke the draft version of your agent.
            sessionId=session_id,  # you continue an existing session with the agent if the value you set for the idle session timeout hasn't been exceeded.
            inputText="-", 
            enableTrace=True, 
            endSession=True  # true to end the session with the agent.
        )

    except Exception as e:
        logging.error(traceback.format_exc())